// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    [version(VERSION)]
    typedef enum CanvasSwapChainRotation
    {
        None,
        Rotate90,
        Rotate180,
        Rotate270,
    } CanvasSwapChainRotation;

    // 
    // CanvasSwapChain is a wrapper for a Direct3D swap chain. It may be used
    // standalone, from inside CanvasAnimatedControl or CanvasSwapChainPanel.
    //
    // It is associated with a CanvasDevice because of the explicit association
    // with a D3D device in CreateSwapChainForComposition.
    //
    // When used by a CanvasAnimatedControl, CanvasSwapChain's device is the
    // device of the control. For CanvasSwapChainPanel or CanvasSwapChain
    // standalone, the device is passed in explicitly by the app at 
    // construction time, like for CanvasImageSource.
    //

    runtimeclass CanvasSwapChain;

    [version(VERSION), uuid(133C25CB-ED3C-492B-BFFE-7509B521842B), exclusiveto(CanvasSwapChain)]
    interface ICanvasSwapChainFactory : IInspectable
    {
        // Creates a DXGI_FORMAT_B8G8R8A8_UNORM, 2-buffer premultiplied-alpha swap chain.
        HRESULT CreateWithSize(
            [in] ICanvasResourceCreatorWithDpi* resourceCreator,
            [in] float width,
            [in] float height,
            [out, retval] CanvasSwapChain** swapChain);

        // Creates a DXGI_FORMAT_B8G8R8A8_UNORM, 2-buffer premultiplied-alpha swap chain.
        HRESULT CreateWithSizeAndDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,
            [in] float dpi,
            [out, retval] CanvasSwapChain** swapChain);

        HRESULT CreateWithAllOptions(
            [in] ICanvasResourceCreatorWithDpi* resourceCreator,
            [in] float width,
            [in] float height,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            [in] INT32 bufferCount,
            [in] CanvasAlphaMode alphaMode,
            [out, retval] CanvasSwapChain** swapChain);

        HRESULT CreateWithAllOptionsAndDpi(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float width,
            [in] float height,

            // Must be one of R16G16B16A16_FLOAT, DXGI_FORMAT_B8G8R8A8_UNORM, or DXGI_FORMAT_R8G8B8A8_UNORM
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat format,
            
            // Must be a number from 2 to 16
            [in] INT32 bufferCount, 
            
            // This enum does not include UNSPECIFIED alpha and the native one does.
            // However, there is an overloaded constructor which omits this argument entirely.
            [in] CanvasAlphaMode alphaMode, 

            // An IDXGIOutput* argument is not included here. It represents less common 
            // usage scenarios and there is not a way to get to it from the current API.
            
            [in] float dpi,
            [out, retval] CanvasSwapChain** swapChain);
    };

    [version(VERSION), uuid(882E3C3A-5725-409C-9E76-F80B3BACF1B4), exclusiveto(CanvasSwapChain)]
    interface ICanvasSwapChain : IInspectable
        requires Windows.Foundation.IClosable
    {
        [overload("Present")]
        HRESULT Present();
        
        [overload("Present")]
        HRESULT PresentWithSyncInterval([in] INT32 syncInterval);

        [overload("ResizeBuffers")]
        HRESULT ResizeBuffersWithSize(
            [in] float newWidth,
            [in] float newHeight);

        [overload("ResizeBuffers")]
        HRESULT ResizeBuffersWithAllOptions(
            [in] float newWidth,
            [in] float newHeight,
            [in] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat newFormat,
            [in] INT32 bufferCount);

        // Returns the properties used to create this swap chain object.
        [propget] HRESULT Device([out, retval] CanvasDevice** value);
        [propget] HRESULT Size([out, retval] Windows.Foundation.Size* size);
        [propget] HRESULT SizeInPixels([out, retval] BitmapSize* size);
        [propget] HRESULT Dpi([out, retval] float* dpi);
        [propget] HRESULT Format([out, retval] Microsoft.Graphics.Canvas.DirectX.DirectXPixelFormat* value);
        [propget] HRESULT BufferCount([out, retval] INT32* value);
        [propget] HRESULT AlphaMode([out, retval] CanvasAlphaMode* value);
        
        [propget] HRESULT Rotation([out, retval] CanvasSwapChainRotation* value);
        [propput] HRESULT Rotation([in] CanvasSwapChainRotation value);

        [propget] HRESULT SourceSize([out, retval] Windows.Foundation.Size* value);
        [propput] HRESULT SourceSize([in] Windows.Foundation.Size value);

        [propget] HRESULT TransformMatrix([out, retval] Microsoft.Graphics.Canvas.Numerics.Matrix3x2* value);
        [propput] HRESULT TransformMatrix([in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 value);

        HRESULT ConvertPixelsToDips([in] INT32 pixels, [out, retval] float* dips);
        HRESULT ConvertDipsToPixels([in] float dips, [out, retval] INT32* pixels);

        // Used to create a drawing session that targets this swap chain object.
        HRESULT CreateDrawingSession(
            [in] Windows.UI.Color clearColor,
            [out, retval] CanvasDrawingSession** drawingSession);
    };

    [version(VERSION), activatable(ICanvasSwapChainFactory, VERSION), marshaling_behavior(agile), threading(both)]
    runtimeclass CanvasSwapChain
    {
        [default] interface ICanvasSwapChain;
    };
}
