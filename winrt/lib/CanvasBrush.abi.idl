// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    //
    // ICanvasBrush
    //
    [version(VERSION), uuid(F5D58591-C803-41B4-878E-79D92AB13295)]
    interface ICanvasBrush : IInspectable
        requires Windows.Foundation.IClosable
    {
        [propget]
        HRESULT Opacity([out, retval] float* value);

        [propput]
        HRESULT Opacity([in] float value);

        [propget]
        HRESULT Transform([out, retval] Microsoft.Graphics.Canvas.Numerics.Matrix3x2* value);

        [propput]
        HRESULT Transform([in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 value);

        [propget]
        HRESULT Device([out, retval] CanvasDevice** value);
    };

    //
    // ICanvasSolidColorBrush
    //
    runtimeclass CanvasSolidColorBrush;
    runtimeclass CanvasDevice;

    [version(VERSION), uuid(8ABF4780-4EDD-4F2B-BF63-2C385115B201), exclusiveto(CanvasSolidColorBrush)]
    interface ICanvasSolidColorBrushFactory : IInspectable
    {
        HRESULT Create(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color color,
            [out, retval] CanvasSolidColorBrush** canvasSolidColorBrush
            );
    };

    [version(VERSION), uuid(8BC30F87-BAD5-4871-88B8-9FE3C63D204A), exclusiveto(CanvasSolidColorBrush)]
    interface ICanvasSolidColorBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT Color(
            [out, retval] Windows.UI.Color* value
            );

        [propput]
        HRESULT Color(
            [in] Windows.UI.Color value
            );
    };

    [version(VERSION), activatable(ICanvasSolidColorBrushFactory, VERSION)]
    runtimeclass CanvasSolidColorBrush
    {
        [default] interface ICanvasSolidColorBrush;
    }    

    //
    // ICanvasImageBrush
    //
    runtimeclass CanvasImageBrush;

    [version(VERSION), uuid(C40CCB59-1B87-4394-A6A6-ECD278E877D6), exclusiveto(CanvasImageBrush)]
    interface ICanvasImageBrushFactory : IInspectable
    {
        HRESULT Create(
            [in] ICanvasResourceCreator* resourceCreator,
            [out, retval] CanvasImageBrush** canvasImageBrush
            );

        HRESULT CreateWithImage(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] ICanvasImage* image,
            [out, retval] CanvasImageBrush** canvasImageBrush
            );
    };

    [version(VERSION), uuid(5A21C4E7-D450-4942-8BBD-F017097AB763), exclusiveto(CanvasImageBrush)]
    interface ICanvasImageBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT Image([out, retval] ICanvasImage** value);

        [propput]
        HRESULT Image([in] ICanvasImage* value);

        [propget]
        HRESULT ExtendX([out, retval] CanvasEdgeBehavior* value);

        [propput]
        HRESULT ExtendX([in] CanvasEdgeBehavior value);

        [propget]
        HRESULT ExtendY([out, retval] CanvasEdgeBehavior* value);

        [propput]
        HRESULT ExtendY([in] CanvasEdgeBehavior value);

        [propget]
        HRESULT SourceRectangle([out, retval] Windows.Foundation.IReference<Windows.Foundation.Rect>** value);

        [propput]
        HRESULT SourceRectangle([in] Windows.Foundation.IReference<Windows.Foundation.Rect>* value);

        [propget]
        HRESULT Interpolation([out, retval] CanvasImageInterpolation* value);

        [propput]
        HRESULT Interpolation([in] CanvasImageInterpolation value);
    };

    [version(VERSION), activatable(ICanvasImageBrushFactory, VERSION)]
    runtimeclass CanvasImageBrush
    {
        [default] interface ICanvasImageBrush;
    }    

    //
    // Common gradient data
    //
    [version(VERSION)]
    typedef struct CanvasGradientStop
    {
        float Position;
        Windows.UI.Color Color;
    } CanvasGradientStop;

    //
    // ICanvasLinearGradientBrush
    //
    runtimeclass CanvasLinearGradientBrush;

    [version(VERSION), uuid(A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrushFactory : IInspectable
    {
        // Defaults to color interpolation sRGB-premultiplied, and CLAMP extend mode.
        HRESULT CreateSimple(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color startColor,
            [in] Windows.UI.Color endColor,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        // Defaults to color interpolation sRGB-premultiplied.
        HRESULT CreateWithEdgeBehaviorAndAlphaMode(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] CanvasEdgeBehavior edgeBehavior,
            [in] CanvasAlphaMode alphaMode,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);

        // Exposes all creation options.
        HRESULT CreateWithEdgeBehaviorAndInterpolationOptions(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] CanvasEdgeBehavior edgeBehavior,
            [in] CanvasAlphaMode alphaMode,
            [in] CanvasColorSpace preInterpolationSpace,
            [in] CanvasColorSpace postInterpolationSpace,
            [in] CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);
     }

    [version(VERSION), uuid(A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT StartPoint([out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* value);

        [propput]
        HRESULT StartPoint([in] Microsoft.Graphics.Canvas.Numerics.Vector2 value);

        [propget]
        HRESULT EndPoint([out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* value);

        [propput]
        HRESULT EndPoint([in] Microsoft.Graphics.Canvas.Numerics.Vector2 value);

        [propget]
        HRESULT Stops(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStop** valueElements);

        [propget]
        HRESULT EdgeBehavior([out, retval] CanvasEdgeBehavior* value);

        [propget]
        HRESULT PreInterpolationSpace([out, retval] CanvasColorSpace* value);

        [propget]
        HRESULT PostInterpolationSpace([out, retval] CanvasColorSpace* value);

        [propget]
        HRESULT BufferPrecision([out, retval] CanvasBufferPrecision* value);

        [propget]
        HRESULT AlphaMode([out, retval] CanvasAlphaMode* value);
    };

    [version(VERSION), uuid(E9DE3392-8FBF-478C-8E6A-D0A0EA753B37), exclusiveto(CanvasLinearGradientBrush)]
    interface ICanvasLinearGradientBrushStatics : IInspectable
    {
        HRESULT CreateRainbow(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float eldritchness,
            [out, retval] CanvasLinearGradientBrush** canvasLinearGradientBrush);
    };

    [version(VERSION), activatable(ICanvasLinearGradientBrushFactory, VERSION), static(ICanvasLinearGradientBrushStatics, VERSION)]
    runtimeclass CanvasLinearGradientBrush
    {
        [default] interface ICanvasLinearGradientBrush;
    }

    //
    // RadialGradientBrush
    //
    runtimeclass CanvasRadialGradientBrush;

    [version(VERSION), uuid(7933A51F-A910-4548-849F-42DDEC466F41), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrushFactory : IInspectable
    {
        // Defaults to color interpolation sRGB-premultiplied, and CLAMP extend mode.
        HRESULT CreateSimple(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] Windows.UI.Color startColor,
            [in] Windows.UI.Color endColor,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        // Defaults to color interpolation sRGB-premultiplied.
        HRESULT CreateWithEdgeBehaviorAndAlphaMode(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] CanvasEdgeBehavior edgeBehavior,
            [in] CanvasAlphaMode alphaMode,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);

        // Exposes all creation options.
        HRESULT CreateWithEdgeBehaviorAndInterpolationOptions(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] UINT32 gradientStopCount,
            [in, size_is(gradientStopCount)] CanvasGradientStop* gradientStops,
            [in] CanvasEdgeBehavior edgeBehavior,
            [in] CanvasAlphaMode alphaMode,
            [in] CanvasColorSpace preInterpolationSpace,
            [in] CanvasColorSpace postInterpolationSpace,
            [in] CanvasBufferPrecision bufferPrecision,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);
    }

    [version(VERSION), uuid(4D27D756-14A9-4EB7-973F-E6614D4F89E7), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrush : IInspectable
        requires ICanvasBrush
    {
        [propget]
        HRESULT Center([out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* value);

        [propput]
        HRESULT Center([in] Microsoft.Graphics.Canvas.Numerics.Vector2 value);

        [propget]
        HRESULT OriginOffset([out, retval] Microsoft.Graphics.Canvas.Numerics.Vector2* value);

        [propput]
        HRESULT OriginOffset([in] Microsoft.Graphics.Canvas.Numerics.Vector2 value);

        [propget]
        HRESULT RadiusX([out, retval] float* value);

        [propput]
        HRESULT RadiusX([in] float value);

        [propget]
        HRESULT RadiusY([out, retval] float* value);

        [propput]
        HRESULT RadiusY([in] float value);

        [propget]
        HRESULT Stops(
            [out] UINT32* valueCount,
            [out, size_is(, *valueCount), retval] CanvasGradientStop** valueElements);

        [propget]
        HRESULT EdgeBehavior([out, retval] CanvasEdgeBehavior* value);

        [propget]
        HRESULT PreInterpolationSpace([out, retval] CanvasColorSpace* value);

        [propget]
        HRESULT PostInterpolationSpace([out, retval] CanvasColorSpace* value);

        [propget]
        HRESULT BufferPrecision([out, retval] CanvasBufferPrecision* value);

        [propget]
        HRESULT AlphaMode([out, retval] CanvasAlphaMode* value);
    };

    [version(VERSION), uuid(3B0D4DAE-3E21-4818-99B4-779ACAAF18BE), exclusiveto(CanvasRadialGradientBrush)]
    interface ICanvasRadialGradientBrushStatics : IInspectable
    {
        HRESULT CreateRainbow(
            [in] ICanvasResourceCreator* resourceCreator,
            [in] float eldritchness,
            [out, retval] CanvasRadialGradientBrush** canvasRadialGradientBrush);
    };

    [version(VERSION), activatable(ICanvasRadialGradientBrushFactory, VERSION), static(ICanvasRadialGradientBrushStatics, VERSION)]
    runtimeclass CanvasRadialGradientBrush
    {
        [default] interface ICanvasRadialGradientBrush;
    }

}
