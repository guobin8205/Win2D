// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasControl;

    //
    // CanvasDrawEventArgs
    //
    runtimeclass CanvasDrawEventArgs;

    [version(VERSION), uuid(7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44), exclusiveto(CanvasDrawEventArgs)]
    interface ICanvasDrawEventArgsFactory : IInspectable
    {
        HRESULT Create(
            [in] CanvasDrawingSession* canvasDrawingSession,
            [out, retval] CanvasDrawEventArgs** drawEventArgs
            );
    };

    [version(VERSION), uuid(FB86169F-25D4-4551-BD8F-214BEAF0AC24), exclusiveto(CanvasDrawEventArgs)]
    interface ICanvasDrawEventArgs : IInspectable
    {
        [propget] HRESULT DrawingSession([out, retval] CanvasDrawingSession** value);
    }

    [version(VERSION), activatable(ICanvasDrawEventArgsFactory, VERSION), threading(both), marshaling_behavior(agile)]
    runtimeclass CanvasDrawEventArgs
    {
        [default] interface ICanvasDrawEventArgs;
    }

    //
    // CanvasCreateResourcesEventArgs
    //
    [version(VERSION)]
    typedef enum CanvasCreateResourcesReason
    {
        FirstTime,
        NewDevice,
        DpiChanged,
    } CanvasCreateResourcesReason;

    runtimeclass CanvasCreateResourcesEventArgs;

    [version(VERSION), uuid(EDC52108-F6BA-4A09-9FA3-10C97A24E49A), exclusiveto(CanvasCreateResourcesEventArgs)]
    interface ICanvasCreateResourcesEventArgs : IInspectable
    {
        [propget] HRESULT Reason([out, retval] CanvasCreateResourcesReason* value);

        //
        // Caller can set an AsyncAction to continue the create resources
        // operation.  CanvasControl will wait until this has completed before
        // calling any draw handlers.
        //
        // The same event args object is passed to all event handlers.  The
        // AsyncAction may only be set once - attempting to set it when it
        // already has a non-null value will result in an error.
        //
        HRESULT TrackAsyncAction(
            [in] Windows.Foundation.IAsyncAction* action);
    }

    [version(VERSION), threading(both), marshaling_behavior(agile)]
    runtimeclass CanvasCreateResourcesEventArgs
    {
        [default] interface ICanvasCreateResourcesEventArgs;

        // TODO #3046: this class should be activatable
    }

    // 
    // CanvasControl
    //

    [version(VERSION), uuid(F006E06D-79DB-484F-B898-479CF069C0F5), exclusiveto(CanvasControl)]
    interface ICanvasControl : IInspectable
        requires ICanvasResourceCreatorWithDpi
    {
        //
        // event CreateResources - this is the synchronous CreateResources
        // event.  This is called after the device is created (or recreated
        // after a device lost error) to allow the app to create device
        // dependent resources.
        //
        [eventadd] HRESULT CreateResources(
            [in]          Windows.Foundation.TypedEventHandler<CanvasControl*, CanvasCreateResourcesEventArgs*>* value,
            [out, retval] EventRegistrationToken* token);

        [eventremove] HRESULT CreateResources([in] EventRegistrationToken token);

        //
        // True if all required CreateResources calls (including the AsyncAction
        // if set) are complete -- and so the Draw event will be raised for the
        // next frame.
        //
        [propget] HRESULT ReadyToDraw(
            [out, retval] boolean* value);

        //
        // The Draw event is raised to allow the app to draw onto the canvas
        // control, using the CanvasDrawingSession provided in the args.
        //
        [eventadd] HRESULT Draw(
            [in]          Windows.Foundation.TypedEventHandler<CanvasControl*, CanvasDrawEventArgs*>* value, 
            [out, retval] EventRegistrationToken* token);

        [eventremove] HRESULT Draw([in] EventRegistrationToken token);

        //
        // Before the Draw event is raised, the control is cleared to
        // ClearColor.  ClearColor defaults to transparent black (0,0,0,0).
        // Setting ClearColor to a different value triggers a Draw.
        //
        [propput] HRESULT ClearColor([in] Windows.UI.Color value);
        [propget] HRESULT ClearColor([out, retval] Windows.UI.Color* value);

        //
        // Marks the control to be redrawn on the next frame.
        //
        HRESULT Invalidate();
    }

    [version(VERSION), activatable(VERSION), marshaling_behavior(agile), threading(both)]
    runtimeclass CanvasControl : Windows.UI.Xaml.Controls.UserControl
    {
        [default] interface ICanvasControl;
    }

}
