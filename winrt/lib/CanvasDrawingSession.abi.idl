// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasDrawingSession;

    //
    // CanvasDrawingSession needs to be activatable in order to support interop
    // (so we can have a ICanvasFactoryNative on the activation factory).  An
    // empty statics interface provides this.
    //
    [version(VERSION), uuid(21729CFC-1D7A-434E-B19B-8B15306B0DA8), exclusiveto(CanvasDrawingSession)]
    interface ICanvasDrawingSessionStatics : IInspectable
    {
    }

    [version(VERSION), uuid(F60AFD09-E623-4BE0-B750-578AA920B1DB), exclusiveto(CanvasDrawingSession)]
    interface ICanvasDrawingSession : IInspectable
        requires Windows.Foundation.IClosable, ICanvasResourceCreatorWithDpi
    {
        HRESULT Clear([in] Windows.UI.Color color);

        //
        // Some of these methods have large numbers of overloads.
        //
        // The following naming scheme is used:
        //
        // {METHOD}(AtCoords)?With(Brush|Color)(And{PARAMn})*
        //
        // Where {METHOD} is the method name and {PARAMn} is the nth additional
        // parameter.
        //
        // Examples:
        //
        //   DrawLineWithBrush(Vector2, Vector2, Brush)   (0 additional parameters)
        //   DrawLineAtCoordsWithBrush(float, float, float, float, Brush)  (0 additional parameters)
        //   DrawLineWithColor(Vector2, Vector2, Color)   (0 additional parameters)
        //   DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float, float, float, float, Brush, float, StrokeStyle) (2 additional parameters)
        //
        // The overloads are sorted by:
        //
        //   - additional parameter count
        //   - Brush before Color
        //   - without-AtCoords before with-AtCoords
        //
        // Default overloads are chosen by picking the richest and most complete functionality:
        //
        //   - Prefer WithBrush over WithColor
        //   - Prefer packed structures (eg. Vector2) over expanded (AtCoords) variants
        //

           
        // 
        // DrawImage
        // 

        [overload("DrawImage"), default_overload]
        HRESULT DrawImage(
            [in] ICanvasImage* image,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 offset);

        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtCoords(
            [in] ICanvasImage* image,
            [in] float x,
            [in] float y);

        [overload("DrawImage")]
        HRESULT DrawImageAtOrigin(
            [in] ICanvasImage* image);

        [overload("DrawImage")]
        HRESULT DrawImageWithSourceRect(
            [in] ICanvasImage* image,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRect);

        [overload("DrawImage")]
        HRESULT DrawImageWithSourceRectAndInterpolation(
            [in] ICanvasImage* image,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRect,
            [in] CanvasImageInterpolation interpolation);

        [overload("DrawImage")]
        HRESULT DrawImageWithSourceRectAndInterpolationAndComposite(
            [in] ICanvasImage* image,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRect,
            [in] CanvasImageInterpolation interpolation,
            [in] CanvasComposite composite);

        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtCoordsWithSourceRect(
            [in] ICanvasImage* image,
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRect);

        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtCoordsWithSourceRectAndInterpolation(
            [in] ICanvasImage* image,
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRect,
            [in] CanvasImageInterpolation interpolation);

        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtCoordsWithSourceRectAndInterpolationAndComposite(
            [in] ICanvasImage* image,
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRect,
            [in] CanvasImageInterpolation interpolation,
            [in] CanvasComposite composite);

        [overload("DrawImage")]
        HRESULT DrawBitmapWithDestRect(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRect);

        [overload("DrawImage")]
        HRESULT DrawBitmapWithDestRectAndSourceRect(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRect,
            [in] Windows.Foundation.Rect sourceRect);

        [overload("DrawImage")]
        HRESULT DrawBitmapWithDestRectAndSourceRectAndOpacity(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRect,
            [in] Windows.Foundation.Rect sourceRect,
            [in] float opacity);

        [overload("DrawImage")]
        HRESULT DrawBitmapWithDestRectAndSourceRectAndOpacityAndInterpolation(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRect,
            [in] Windows.Foundation.Rect sourceRect,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation);

        [overload("DrawImage")]
        HRESULT DrawBitmapWithDestRectAndSourceRectAndOpacityAndInterpolationAndPerspective(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRect,
            [in] Windows.Foundation.Rect sourceRect,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix4x4 perspective);

        //
        // DrawLine
        //
        
        // 0 additional parameters

        [overload("DrawLine"), default_overload]
        HRESULT DrawLineWithBrush(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] ICanvasBrush* brush);

        [overload("DrawLine")]
        HRESULT DrawLineAtCoordsWithBrush(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] ICanvasBrush* brush);

        [overload("DrawLine")]
        HRESULT DrawLineWithColor(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] Windows.UI.Color color);

        [overload("DrawLine")]
        HRESULT DrawLineAtCoordsWithColor(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] Windows.UI.Color color);

        // 1 additional parameter (StrokeWidth)

        [overload("DrawLine"), default_overload]
        HRESULT DrawLineWithBrushAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawLine"), default_overload]
        HRESULT DrawLineAtCoordsWithBrushAndStrokeWidth(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawLine")]
        HRESULT DrawLineWithColorAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        [overload("DrawLine")]
        HRESULT DrawLineAtCoordsWithColorAndStrokeWidth(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        // 2 additional parameters (StrokeWidth, StrokeStyle)

        [overload("DrawLine"), default_overload]
        HRESULT DrawLineWithBrushAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawLine"), default_overload]
        HRESULT DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawLine")]
        HRESULT DrawLineWithColorAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point0,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point1,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawLine")]
        HRESULT DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
            [in] float x0,
            [in] float y0,
            [in] float x1,
            [in] float y1,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // DrawRectangle
        //

        // 0 additional parameters

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleWithBrush(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush);

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] ICanvasBrush* brush);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleWithColor(
            [in] Windows.Foundation.Rect rect,
            [in] Windows.UI.Color color);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] Windows.UI.Color color);

        // 1 additional parameter (StrokeWidth)

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleWithBrushAndStrokeWidth(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleAtCoordsWithBrushAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleWithColorAndStrokeWidth(
            [in] Windows.Foundation.Rect rect,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleAtCoordsWithColorAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        // 2 additional parameters (StrokeWidth, StrokeStyle)

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRectangle"), default_overload]
        HRESULT DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Rect rect,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRectangle")]
        HRESULT DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillRectangle
        //

        [overload("FillRectangle"), default_overload]
        HRESULT FillRectangleWithBrush(
            [in] Windows.Foundation.Rect rect,
            [in] ICanvasBrush* brush);

        [overload("FillRectangle"), default_overload]
        HRESULT FillRectangleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] ICanvasBrush* brush);

        [overload("FillRectangle")]
        HRESULT FillRectangleWithColor(
            [in] Windows.Foundation.Rect rect,
            [in] Windows.UI.Color color);

        [overload("FillRectangle")]
        HRESULT FillRectangleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] Windows.UI.Color color);

        //
        // DrawRoundedRectangle
        //

        // 0 additional parameters

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleWithBrush(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleWithColor(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        // 1 additional parameter (StrokeWidth)

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleWithBrushAndStrokeWidth(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleWithColorAndStrokeWidth(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        // 2 additional parameters (StrokeWidth, StrokeStyle)

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRoundedRectangle"), default_overload]
        HRESULT DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawRoundedRectangle")]
        HRESULT DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillRoundedRectangle
        //
        
        [overload("FillRoundedRectangle"), default_overload]
        HRESULT FillRoundedRectangleWithBrush(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("FillRoundedRectangle"), default_overload]
        HRESULT FillRoundedRectangleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("FillRoundedRectangle")]
        HRESULT FillRoundedRectangleWithColor(
            [in] Windows.Foundation.Rect rect,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        [overload("FillRoundedRectangle")]
        HRESULT FillRoundedRectangleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        //
        // DrawEllipse
        //

        // 0 additional parameters
        
        [overload("DrawEllipse"), default_overload]
        HRESULT DrawEllipseWithBrush(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseWithColor(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        // 1 additional parameter (StrokeWidth)

        [overload("DrawEllipse"), default_overload]
        HRESULT DrawEllipseWithBrushAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseAtCoordsWithBrushAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseWithColorAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseAtCoordsWithColorAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        // 2 additional parameters (StrokeWidth, StrokeStyle)

        [overload("DrawEllipse"), default_overload]
        HRESULT DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawEllipse"), default_overload]
        HRESULT DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawEllipse")]
        HRESULT DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillEllipse
        //

        [overload("FillEllipse"), default_overload]
        HRESULT FillEllipseWithBrush(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("FillEllipse"), default_overload]
        HRESULT FillEllipseAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] ICanvasBrush* brush);

        [overload("FillEllipse")]
        HRESULT FillEllipseWithColor(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        [overload("FillEllipse")]
        HRESULT FillEllipseAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float radiusX,
            [in] float radiusY,
            [in] Windows.UI.Color color);

        //
        // DrawCircle
        //

        // 0 additional parameters
        
        [overload("DrawCircle"), default_overload]
        HRESULT DrawCircleWithBrush(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] ICanvasBrush* brush);

        [overload("DrawCircle")]
        HRESULT DrawCircleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] ICanvasBrush* brush);

        [overload("DrawCircle")]
        HRESULT DrawCircleWithColor(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] Windows.UI.Color color);

        [overload("DrawCircle")]
        HRESULT DrawCircleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] Windows.UI.Color color);

        // 1 additional parameter (StrokeWidth)

        [overload("DrawCircle"), default_overload]
        HRESULT DrawCircleWithBrushAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawCircle")]
        HRESULT DrawCircleAtCoordsWithBrushAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth);

        [overload("DrawCircle")]
        HRESULT DrawCircleWithColorAndStrokeWidth(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        [overload("DrawCircle")]
        HRESULT DrawCircleAtCoordsWithColorAndStrokeWidth(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] Windows.UI.Color color,
            [in] float strokeWidth);

        // 2 additional parameters (StrokeWidth, StrokeStyle)

        [overload("DrawCircle"), default_overload]
        HRESULT DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawCircle"), default_overload]
        HRESULT DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] ICanvasBrush* brush,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawCircle")]
        HRESULT DrawCircleWithColorAndStrokeWidthAndStrokeStyle(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        [overload("DrawCircle")]
        HRESULT DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] Windows.UI.Color color,
            [in] float strokeWidth,
            [in] CanvasStrokeStyle* strokeStyle);

        //
        // FillCircle
        //

        [overload("FillCircle"), default_overload]
        HRESULT FillCircleWithBrush(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] ICanvasBrush* brush);

        [overload("FillCircle"), default_overload]
        HRESULT FillCircleAtCoordsWithBrush(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] ICanvasBrush* brush);

        [overload("FillCircle")]
        HRESULT FillCircleWithColor(
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 centerPoint,
            [in] float radius,
            [in] Windows.UI.Color color);

        [overload("FillCircle")]
        HRESULT FillCircleAtCoordsWithColor(
            [in] float x,
            [in] float y,
            [in] float radius,
            [in] Windows.UI.Color color);

        //
        // DrawText
        //

        // 0 additional parameters

        [overload("DrawText")]
        HRESULT DrawTextAtPointWithColor(
            [in] HSTRING text,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] Windows.UI.Color color);

        [overload("DrawText")]
        HRESULT DrawTextAtPointCoordsWithColor(
            [in] HSTRING text,
            [in] float x,
            [in] float y,
            [in] Windows.UI.Color color);

        // 1 additional parameter (TextFormat)

        [overload("DrawText")]
        HRESULT DrawTextAtPointWithBrushAndFormat(
            [in] HSTRING text,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        [overload("DrawText"), default_overload]
        HRESULT DrawTextAtRectWithBrushAndFormat(
            [in] HSTRING text,
            [in] Windows.Foundation.Rect rectangle,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        [overload("DrawText"), default_overload]
        HRESULT DrawTextAtPointCoordsWithBrushAndFormat(
            [in] HSTRING text,
            [in] float x,
            [in] float y,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        [overload("DrawText"), default_overload]
        HRESULT DrawTextAtRectCoordsWithBrushAndFormat(
            [in] HSTRING text,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] ICanvasBrush* brush,
            [in] CanvasTextFormat* format);

        [overload("DrawText")]
        HRESULT DrawTextAtPointWithColorAndFormat(
            [in] HSTRING text,
            [in] Microsoft.Graphics.Canvas.Numerics.Vector2 point,
            [in] Windows.UI.Color color,
            [in] CanvasTextFormat* format);

        [overload("DrawText")]
        HRESULT DrawTextAtRectWithColorAndFormat(
            [in] HSTRING text,
            [in] Windows.Foundation.Rect rectangle,
            [in] Windows.UI.Color color,
            [in] CanvasTextFormat* format);

        [overload("DrawText")]
        HRESULT DrawTextAtPointCoordsWithColorAndFormat(
            [in] HSTRING text,
            [in] float x,
            [in] float y,
            [in] Windows.UI.Color color,
            [in] CanvasTextFormat* format);

        [overload("DrawText")]
        HRESULT DrawTextAtRectCoordsWithColorAndFormat(
            [in] HSTRING text,
            [in] float x,
            [in] float y,
            [in] float w,
            [in] float h,
            [in] Windows.UI.Color color,
            [in] CanvasTextFormat* format);

        //
        // State properties
        //

        [propget] HRESULT Antialiasing([out, retval] CanvasAntialiasing* value);
        [propput] HRESULT Antialiasing([in] CanvasAntialiasing value);

        [propget] HRESULT Blend([out, retval] CanvasBlend* value);
        [propput] HRESULT Blend([in] CanvasBlend value);

        [propget] HRESULT TextAntialiasing([out, retval] CanvasTextAntialiasing* value);
        [propput] HRESULT TextAntialiasing([in] CanvasTextAntialiasing value);

        [propget] HRESULT Transform([out, retval] Microsoft.Graphics.Canvas.Numerics.Matrix3x2* value);
        [propput] HRESULT Transform([in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 value);

        [propget] HRESULT Units([out, retval] CanvasUnits* value);
        [propput] HRESULT Units([in] CanvasUnits value);
    };

    [version(VERSION), static(ICanvasDrawingSessionStatics, VERSION)]
    runtimeclass CanvasDrawingSession
    {
        [default] interface ICanvasDrawingSession;
    };
}
