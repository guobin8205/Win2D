// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    //
    // CanvasImageSource - this derives from
    // Windows.UI.Xaml.Media.Imaging.SurfaceImageSource and extends it so that
    // it knows about Canvas types.
    //
    // Usage (C#):
    //
    //   var imageSource = new CanvasImageSource(canvasDevice, width, height, dpi);
    //
    //   imageControl.Source = imageSource;
    //
    //
    //   using (var ds = imageSource.CreateDrawingSession(Colors.Black))
    //   {
    //        // drawing code
    //   }
    //
    // Each time CreateDrawingSession is called you won't necessary get the same
    // surface back (due to how XAML manages surfaces), so the caller must
    // render over the entire update region for that drawing session.  This is
    // enforced by CreateDrawingSession taking a color.  Clear() will be called
    // with this color before CreateDrawingSession returns.
    //
    
    runtimeclass CanvasImageSource;

    [version(VERSION)]
    typedef enum CanvasBackground
    {
        //
        // Transparent background is likely to be what most users want by
        // default.
        //
        Transparent,
        
        //
        // Manually specifying opaque allows for increased efficiency.
        //
        Opaque
    } CanvasBackground;


    [version(VERSION), 
     uuid(8596BEDD-D7F7-4C6B-B1AD-41949035E084), 
     exclusiveto(CanvasImageSource)]
    interface ICanvasImageSourceFactory : IInspectable
    {
        HRESULT Create(
            [in]          ICanvasResourceCreatorWithDpi* resourceCreator,
            [in]          float width,
            [in]          float height, 
            [out, retval] CanvasImageSource** imageSource);

        HRESULT CreateWithDpi(
            [in]          ICanvasResourceCreator* resourceCreator,
            [in]          float width,
            [in]          float height,
            [in]          float dpi,
            [out, retval] CanvasImageSource** imageSource);

        HRESULT CreateWithDpiAndBackground(
            [in]          ICanvasResourceCreator* resourceCreator,
            [in]          float width,
            [in]          float height,
            [in]          float dpi,
            [in]          CanvasBackground background,
            [out, retval] CanvasImageSource** imageSource);
    };

    [version(VERSION), 
     uuid(3C35E87A-E881-4F44-B0D1-551413AEC66D), 
     exclusiveto(CanvasImageSource)]
    interface ICanvasImageSource : IInspectable
    {
        //
        // Returns a new drawing session for redrawing the entire image source.
        // The entire image source is cleared to the specified color.
        //
        [overload("CreateDrawingSession")]
        HRESULT CreateDrawingSession(
            [in]          Windows.UI.Color clearColor,
            [out, retval] CanvasDrawingSession** drawingSession);

        //
        // Returns a new drawing session for updating a region of the image
        // source.  The entire region is cleared to the specified color.
        //
        [overload("CreateDrawingSession")]
        HRESULT CreateDrawingSessionWithUpdateRectangle(
            [in]          Windows.UI.Color clearColor,
            [in]          Windows.Foundation.Rect updateRectangle,
            [out, retval] CanvasDrawingSession** drawingSession);

        //
        // Returns the device used to create this image source
        //
        [propget]
        HRESULT Device(
            [out, retval] CanvasDevice** value);

        //
        // Binds this image source to a different device.  This is used after a
        // new device is recovered after a device lost.
        //
        [propput]
        HRESULT Device(
            [in] CanvasDevice* value);

        //
        // Gets the DPI of the image source.
        //
        [propget]
        HRESULT Dpi([out, retval] float* dpi);

        //
        // Convert units between dips and pixels.
        //
        HRESULT ConvertPixelsToDips([in] INT32 pixels, [out, retval] float* dips);
        HRESULT ConvertDipsToPixels([in] float dips, [out, retval] INT32* pixels);

        //
        // Gets the size of the image source, in dips or pixels.
        //
        [propget]
        HRESULT Size([out, retval] Windows.Foundation.Size* size);

        [propget]
        HRESULT SizeInPixels([out, retval] BitmapSize* size);

        //
        // Gets the image source background mode.
        //
        [propget]
        HRESULT Background([out, retval] CanvasBackground* value);
    };

    [version(VERSION), 
     activatable(ICanvasImageSourceFactory, VERSION), 
     marshaling_behavior(agile), 
     threading(both)]
    runtimeclass CanvasImageSource : Windows.UI.Xaml.Media.Imaging.SurfaceImageSource
    {
        [default] interface ICanvasImageSource;
    };
}
