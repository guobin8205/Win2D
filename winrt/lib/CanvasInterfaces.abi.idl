// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use these files except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

namespace Microsoft.Graphics.Canvas
{
    //
    // ICanvasImage
    //
    runtimeclass CanvasDrawingSession;

    [version(VERSION), uuid(794966D3-6A64-47E9-8DA8-B46AAA24D53B)]
    interface ICanvasImage : IInspectable
        requires Microsoft.Graphics.Canvas.Effects.IEffectInput, Windows.Foundation.IClosable
    {
        // The returned bounds reflect the DPI and UnitMode of the drawing session.
        [overload("GetBounds")]
        HRESULT GetBounds(
            [in] CanvasDrawingSession* drawingSession,
            [out, retval] Windows.Foundation.Rect* bounds);

        [overload("GetBounds")]
        HRESULT GetBoundsWithTransform(
            [in] CanvasDrawingSession* drawingSession,
            [in] Microsoft.Graphics.Canvas.Numerics.Matrix3x2 transform,
            [out, retval] Windows.Foundation.Rect* bounds);
    }
    
    //
    // ICanvasResourceCreator
    //
    runtimeclass CanvasDevice;

    [version(VERSION), uuid(8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11)]
    interface ICanvasResourceCreator : IInspectable
    {
        [propget] HRESULT Device([out, retval] CanvasDevice** value);
    };

    [version(VERSION), uuid(1A75B512-E9FA-49E6-A876-38CAE194013E)]
    interface ICanvasResourceCreatorWithDpi : IInspectable
        requires ICanvasResourceCreator
    {
        [propget] HRESULT Dpi([out, retval] float* dpi);

        HRESULT ConvertPixelsToDips([in] INT32 pixels, [out, retval] float* dips);
        HRESULT ConvertDipsToPixels([in] float dips, [out, retval] INT32* pixels);
    };
}
