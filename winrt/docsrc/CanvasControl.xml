<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use these files except in compliance with the License. You may obtain
a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
-->

<doc>
  <assembly>
    <name>Microsoft.Graphics.Canvas</name>
  </assembly>
  <members>

    <member name="T:Microsoft.Graphics.Canvas.CanvasControl">
      <summary>XAML control providing immediate mode 2D rendering. Start here if you are new to the Win2D API.</summary>
      <remarks>
        To get started using Win2D, simply add a CanvasControl to your XAML
        tree, subscribe to its CanvasControl.Draw event, and use the methods of
        CanvasDrawEventArgs.DrawingSession to draw your immediate mode 2D graphics.
      </remarks>
      <example>
        <p>Starting with the "Blank App" XAML project template, edit MainPage.xaml and add the namespace:</p>
        <code>
          xmlns:canvas="using:Microsoft.Graphics.Canvas"
        </code>
        <p>Add a CanvasControl to the page:</p>
        <code>
          &lt;Grid&gt;
            &lt;canvas:CanvasControl x:Name="myWidget" CreateResources="myWidget_CreateResources" Draw="myWidget_Draw" ClearColor="CornFlowerBlue"/&gt;
          &lt;/Grid&gt;
        </code>
        <p>Edit MainPage.xaml.cs, and add some drawing code:</p>
        <code>
          public sealed partial class MainPage : Page
          {
              CanvasSolidColorBrush redBrush;

              public MainPage()
              {
                  this.InitializeComponent();
              }

              void myWidget_CreateResources(CanvasControl sender, CanvasCreateResourcesEventArgs args)
              {
                  // Create any resources needed by the Draw event handler.

                  // Asynchronous work can be tracked with TrackAsyncAction:
                  args.TrackAsyncAction(myWidget_CreateResourcesAsync(sender).AsAsyncAction());
              }

              async Task myWidget_CreateResourcesAsync(CanvasControl sender)
              {
                   // Load bitmaps, create brushes, etc.
                   bitmapTiget = await CanvasBitmap.LoadAsync(sender, "imageTiger.jpg");
              }

              void myWidget_Draw(CanvasControl sender, CanvasDrawEventArgs args)
              {
                  args.DrawingSession.DrawEllipse(155, 115, 80, 30, Colors.Black, 3);
                  args.DrawingSession.DrawText("Hello, world!", 100, 100, Colors.Yellow);
              }
          }
        </code>
      </example>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasControl.#ctor">
      <summary>Initializes a new instance of the CanvasControl class.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasControl.Invalidate">
      <summary>Indicates that the contents of the CanvasControl need to be redrawn.
               Calling Invalidate results in the Draw event being raised shortly afterward.</summary>
      <remarks>
        <p>Normally, the contents of a CanvasControl are drawn only once when it first becomes visible.
           If you want to change those contents, call Invalidate to tell the control it must redraw itself.</p>

        <p>This is a lightweight method, so it is reasonable to call it many times in rapid succession.
           High frequency calls to Invalidate will be merged, with the control only actually redrawing
           at a maximum of the display refresh rate. It will not redraw once for every Invalidate call
           if these are happening faster than the display can keep up.</p>

        <p>If you want to animate the contents of a CanvasControl, simply call Invalidate at the end of
           your Draw event handler. This will result in the control being redrawn over and over again.</p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasControl.Device">
      <summary>Gets the underlying device used by this control.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasControl.Dpi">
      <summary>Gets the current dots-per-inch (DPI) of this control.</summary>
      <remarks>
        DPI describes the ratio between device independent pixels (dips) and actual physical pixels.
        The identity DPI value is 96, which means dips and pixels are the same.
      </remarks>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasControl.ConvertPixelsToDips(System.Int32)">
      <summary>Converts units from physical pixels to device independent pixels (dips) based on the current DPI of this control.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasControl.ConvertDipsToPixels(System.Single)">
      <summary>Converts units from device independent pixels (dips) to physical pixels based on the current DPI of this control.</summary>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.CanvasControl.CreateResources">
      <summary>Hook this event to create any resources needed for your drawing.</summary>
      <remarks>The CreateResources event is raised once when the CanvasControl is first initialized, then
               again any time the resources need to be recreated, for instance if the underlying GPU gets reset.</remarks>
    </member>
    <member name="E:Microsoft.Graphics.Canvas.CanvasControl.Draw">
      <summary>This is where the magic happens! Hook this event to issue your immediate mode 2D drawing calls.</summary>
      <remarks>
        <p>The Draw event is raised once when the CanvasControl first becomes visible, then again
           any time its contents need to be redrawn. This can occur if the control is resized, or in
           response to the Invalidate method being called.</p>
        
        <p>If you want to animate the contents of a CanvasControl, simply call Invalidate at the end of
           your Draw event handler. This will result in the control being redrawn over and over again,
           so you can draw different things each time.</p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasControl.ClearColor">
      <summary>The color that the control is cleared to before the Draw event is raised.</summary>
      <remarks>
        <p>
          ClearColor defaults to transparent black, that is Color.FromArgb(0,0,0,0).
        </p>
        <p>
          Modifying ClearColor will cause the control to redraw, as if
          Invalidate() was called.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasControl.ReadyToDraw">
      <summary>Gets whether the control is in a state where it is ready to draw.</summary>
      <remarks>
        This control is ready to draw when a device has been created and all
        CreateResources event handlers have completed successfully.
      </remarks>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.CanvasDrawEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Graphics.Canvas.CanvasControl.Draw"/> event.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasDrawEventArgs.#ctor(Microsoft.Graphics.Canvas.CanvasDrawingSession)">
      <summary>Initializes a new instance of the CanvasDrawEventArgs class.</summary>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasDrawEventArgs.DrawingSession">
      <summary>Gets the drawing session for use by the current event handler.
               This provides methods to draw lines, rectangles, text etc.</summary>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.CanvasCreateResourcesEventArgs">
      <summary>Provides data for the <see cref="E:Microsoft.Graphics.Canvas.CanvasControl.CreateResources"/> event.</summary>
    </member>
    <member name="M:Microsoft.Graphics.Canvas.CanvasCreateResourcesEventArgs.TrackAsyncAction(Windows.Foundation.IAsyncAction)">
      <summary>Causes the sender to track an action that must completed before
      the CreateResources operation can be considered finished.</summary>
      <remarks>
        <p>
          Use this when creating resources involves asynchronous method calls,
          such as <see cref="O:Microsoft.Graphics.Canvas.CanvasBitmap.LoadAsync">CanvasBitmap.LoadAsync</see>.
        </p>
        
        <code>
        void Canvas_CreateResources(CanvasControl sender, CanvasCreateResourcesEventArgs args)
        {
            args.TrackAsyncAction(Canvas_CreateResourcesAsync(sender).AsAsyncAction());
        }

        async Task Canvas_CreateResourcesAsync(CanvasControl sender)
        {
            bitmapTiger = await CanvasBitmap.LoadAsync(sender, "imageTiger.jpg");
        }
        </code>
        <p>
          In the current implementation, only one action can be tracked at a
          time.  Attempting to track multiple actions simultaneously will cause
          TrackAsyncAction to throw an exception.
        </p>
      </remarks>
    </member>
    <member name="P:Microsoft.Graphics.Canvas.CanvasCreateResourcesEventArgs.Reason">
      <summary>Indicates why the CreateResources event was raised.</summary>
      <remarks>This information can be used to optimize resource recreation.
               For instance if the DPI has changed, only resources that depend
               on DPI (such as rendertargets) need to be recreated.</remarks>
    </member>


    <member name="T:Microsoft.Graphics.Canvas.CanvasCreateResourcesReason">
      <summary>Indicates why a CreateResources event was raised.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasCreateResourcesReason.FirstTime">
      <summary>First time resource creation. Everything must be created from scratch.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasCreateResourcesReason.NewDevice">
      <summary>A new device has been created, to recover from a lost device error. All
               graphics resources must be recreated, but other data (for example memory
               buffers that were previously loaded from the filesystem) may be reused.</summary>
    </member>
    <member name="F:Microsoft.Graphics.Canvas.CanvasCreateResourcesReason.DpiChanged">
      <summary>The display DPI has changed.
               Only resources that depend on DPI need to be recreated.</summary>
    </member>

  </members>
</doc>
